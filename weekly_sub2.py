# -*- coding: utf-8 -*-
"""weekly_sub.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uYSU60edSbrFTSGEN-8QbJyh9GpCNsN6

WEEK 1
"""

# importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import classification_report

from sklearn.preprocessing import MinMaxScaler
import joblib
from google.colab import files
uploaded = files.upload()
# Load the dataset (update the filename accordingly)
df = pd.read_csv("irrigation_machine.csv")

# importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import classification_report

from sklearn.preprocessing import MinMaxScaler
import joblib
from google.colab import files
df = pd.read_csv("irrigation_machine.csv")
df.head()



df.info()

df.columns

df.head()

df.describe()

a = df.iloc[:, 0:20]   # This gives you columns 0 to 19 (sensor_0 to sensor_19)


b = df.iloc[:, 21:] # Select only the parcel columns

a.sample(10)

b.sample(10)

a.info()

b.info()

a.shape

b.shape

"""WEEK 2"""

scaler = MinMaxScaler()
a_scaled = scaler.fit_transform(a)
a_scaled

a_train, a_test, b_train, b_test = train_test_split(a_scaled, b, test_size=0.2, random_state=42)

a_train.shape, a_test.shape, b_train.shape, b_test.shape

from sklearn.ensemble import RandomForestClassifier
from sklearn.multioutput import MultiOutputClassifier

# Custom hyperparameters for RandomForest
rf = RandomForestClassifier(
    n_estimators=200,         # Number of trees
    max_depth=10,             # Maximum depth of each tree
    min_samples_split=4,      # Minimum samples to split a node
    min_samples_leaf=2,       # Minimum samples per leaf
    max_features='sqrt',      # Number of features to consider at each split ('auto', 'sqrt', 'log2', or int)
    random_state=42
)

# Wrap it with MultiOutputClassifier
model = MultiOutputClassifier(rf)

# Train the model
model.fit(a_train, b_train)

b_pred = model.predict(a_test)
print("Classification Report:")
print(classification_report(b_test, b_pred, target_names=b.columns))

print(df[['parcel_0', 'parcel_1', 'parcel_2']].sum())

import matplotlib.pyplot as plt
conditions = {
    "Parcel 0 ON": df['parcel_0'],
    "Parcel 1 ON": df['parcel_1'],
    "Parcel 2 ON": df['parcel_2'],
    "Parcel 0 & 1 ON": df['parcel_0'] & df['parcel_1'],
    "Parcel 0 & 2 ON": df['parcel_0'] & df['parcel_2'],
    "Parcel 1 & 2 ON": df['parcel_1'] & df['parcel_2'],
    "All Parcels ON": df['parcel_0'] & df['parcel_1'] & df['parcel_2'],
}

fig, axs = plt.subplots(nrows=len(conditions), figsize=(10,15), sharex=True)

for ax, (title, condition) in zip(axs, conditions.items()):
    ax.step(df.index, condition.astype(int), where='post', linewidth=1, color='teal')
    ax.set_title(f"Sprinkler - {title}")
    ax.set_ylabel("Status")
    ax.set_yticks([0, 1])
    ax.set_yticklabels(['OFF', 'ON'])



axs[-1].set_xlabel("Time Index (Row Number)")
plt.show()

any_pump_on = (df['parcel_0'] == 1) | (df['parcel_1'] == 1) | (df['parcel_2'] == 1)

plt.figure(figsize=(15, 5))

plt.step(df.index, df['parcel_0'], where='post', linewidth=2, label='Parcel 0 Pump', color='blue')
plt.step(df.index, df['parcel_1'], where='post', linewidth=2, label='Parcel 1 Pump', color='orange')
plt.step(df.index, df['parcel_2'], where='post', linewidth=2, label='Parcel 2 Pump', color='green')

plt.title("Pump Activity and Combined Farm Coverage")
plt.xlabel("Time Index (Row Number)")
plt.ylabel("Status")
plt.yticks([0, 1], ['OFF', 'ON'])
plt.legend(loc='upper right')
plt.show()

import joblib
from sklearn.pipeline import Pipeline
from google.colab import files
uploaded = files.upload()
joblib.dump(model, "Farm_Irrigation_System.pkl")